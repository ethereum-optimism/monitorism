version: 2.1

parameters:
  ci_builder_image:
    type: string
    default: us-docker.pkg.dev/oplabs-tools-artifacts/images/ci-builder:v0.48.0
  ci_builder_rust_image:
    type: string
    default: us-docker.pkg.dev/oplabs-tools-artifacts/images/ci-builder-rust:latest
  base_image:
    type: string
    default: default

orbs:
  go: circleci/go@1.8.0
  gcp-cli: circleci/gcp-cli@3.0.1
  slack: circleci/slack@4.10.1
  shellcheck: circleci/shellcheck@3.2.0
commands:
  gcp-oidc-authenticate:
    description: "Authenticate with GCP using a CircleCI OIDC token."
    parameters:
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      workload_identity_pool_id:
        type: env_var_name
        default: GCP_WIP_ID
      workload_identity_pool_provider_id:
        type: env_var_name
        default: GCP_WIP_PROVIDER_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      oidc_token_file_path:
        type: string
        default: /home/circleci/oidc_token.json
    steps:
      - run:
          name: "Create OIDC credential configuration"
          command: |
            # Store OIDC token in temp file
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
                "projects/${<< parameters.project_id >>}/locations/global/workloadIdentityPools/${<< parameters.workload_identity_pool_id >>}/providers/${<< parameters.workload_identity_pool_provider_id >>}"\
                --output-file="<< parameters.gcp_cred_config_file_path >>" \
                --service-account="${<< parameters.service_account_email >>}" \
                --credential-source-file=<< parameters.oidc_token_file_path >>
      - run:
          name: "Authenticate with GCP using OIDC"
          command: |
            # Configure gcloud to leverage the generated credential configuration
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
            # Configure ADC
            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a "$BASH_ENV"

jobs:
  golang-test:
    parameters:
      project_name:
        type: string
        default: ""
    shell: /bin/bash -eo pipefail
    executor:
      name: go/default # is based on cimg/go
      tag: "1.21"
    steps:
      - checkout
      - run:
          name: run <<parameters.project_name>> module tests
          command: cd <<parameters.project_name>> && go test ./... -v

  go-lint:
    parameters:
      project_name:
        type: string
        default: ""
    docker:
      - image: <<pipeline.parameters.ci_builder_image>>
    steps:
      - checkout
      - restore_cache:
          name: Restore Go modules cache
          key: gomod-{{ checksum "<<parameters.project_name>>/go.sum" }}
      - restore_cache:
          key: golang-build-cache
      - restore_cache:
          key: golang-lint-cache
      - run:
          name: run Go linter
          command: |
            # Identify how many cores it defaults to
            golangci-lint --help | grep concurrency
            make <<parameters.project_name>>-lint-go
          working_directory: .
      - save_cache:
          key: golang-build-cache
          paths:
            - "/root/.cache/go-build"
      - save_cache:
          key: golang-lint-cache
          paths:
            - "/root/.cache/golangci-lint"

  docker-build:
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      docker_tags:
        description: Docker image tags, comma-separated
        type: string
      docker_name:
        description: "Docker buildx bake target"
        type: string
        default: ""
      registry:
        description: Docker registry
        type: string
        default: "us-docker.pkg.dev"
      repo:
        description: Docker repo
        type: string
        default: "oplabs-tools-artifacts/images"
      platforms:
        description: Platforms to build for, comma-separated
        type: string
        default: "linux/amd64"
      publish:
        description: Publish the docker image (multi-platform, all tags)
        type: boolean
        default: false
      release:
        description: Run the release script
        type: boolean
        default: false
      resource_class:
        description: Docker resoruce class
        type: string
        default: medium
    machine:
      image: <<pipeline.parameters.base_image>>
      resource_class: "<<parameters.resource_class>>"
      docker_layer_caching: true # we rely on this for faster builds, and actively warm it up for builds with common stages
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/docker_images
      - run:
          command: mkdir -p /tmp/docker_images
      - when:
          condition: "<<parameters.release>>"
          steps:
            - gcp-cli/install
      - when:
          condition:
            or:
              - "<<parameters.publish>>"
              - "<<parameters.release>>"
          steps:
            - gcp-oidc-authenticate
      - run:
          name: Build
          command: |

            export REGISTRY="<<parameters.registry>>"
            export REPOSITORY="<<parameters.repo>>"
            export IMAGE_TAGS="$(echo -ne "<<parameters.docker_tags>>" | sed "s/[^a-zA-Z0-9\n,]/-/g")"
            export GIT_COMMIT="$(git rev-parse HEAD)"
            export GIT_DATE="$(git show -s --format='%ct')"
            export PLATFORMS="<<parameters.platforms>>"

            echo "Checking git tags pointing at $GIT_COMMIT:"
            tags_at_commit=$(git tag --points-at $GIT_COMMIT)
            echo "Tags at commit:\n$tags_at_commit"

            filtered_tags=$(echo "$tags_at_commit" | grep "^<<parameters.docker_name>>/" || true)
            echo "Filtered tags: $filtered_tags"

            if [ -n "$filtered_tags" ]; then
              sorted_tags=$(echo "$filtered_tags" | sed "s/<<parameters.docker_name>>\///" | sort -V)
              echo "Sorted tags: $sorted_tags"

              # prefer full release tag over "-rc" release candidate tag if both exist
              full_release_tag=$(echo "$sorted_tags" | grep -v -- "-rc" || true)
              if [ -z "$full_release_tag" ]; then
                export GIT_VERSION=$(echo "$sorted_tags" | tail -n 1)
              else
                export GIT_VERSION=$(echo "$full_release_tag" | tail -n 1)
              fi
              
              export IMAGE_TAGS="$GIT_VERSION,$IMAGE_TAGS"
              echo "Setting IMAGE_TAGS=$IMAGE_TAGS"
            fi



            # Create, start (bootstrap) and use a *named* docker builder
            # This allows us to cross-build multi-platform,
            # and naming allows us to use the DLC (docker-layer-cache)
            docker buildx create --driver=docker-container --name=buildx-build --bootstrap --use

            DOCKER_OUTPUT_DESTINATION=""
            if [ "<<parameters.publish>>" == "true" ]; then
              gcloud auth configure-docker <<parameters.registry>>
              echo "Building for platforms $PLATFORMS and then publishing to registry"
              DOCKER_OUTPUT_DESTINATION="--push"
            else
              if [[ $PLATFORMS == *,* ]]; then
                echo "ERROR: cannot perform multi-arch (platforms: $PLATFORMS) build while also loading the result into regular docker"
                exit 1
              else
                echo "Running single-platform $PLATFORMS build and loading into docker"
                DOCKER_OUTPUT_DESTINATION="--load"
              fi
            fi

            # Let them cook!
            docker buildx bake \
              --progress plain \
              --builder=buildx-build \
              -f docker-bake.hcl \
              $DOCKER_OUTPUT_DESTINATION \
              <<parameters.docker_name>>

          no_output_timeout: 45m
      - when:
          condition:
            or:
              - and:
                  - "<<parameters.publish>>"
                  - "<<parameters.release>>"
              - and:
                  - "<<parameters.publish>>"
                  - equal: [main, << pipeline.git.branch >>]
          steps:
            - gcp-oidc-authenticate:
                service_account_email: GCP_SERVICE_ATTESTOR_ACCOUNT_EMAIL
            - run:
                name: Sign
                command: |
                  git clone https://github.com/ethereum-optimism/binary_signer
                  cd binary_signer/signer
                  git checkout tags/v1.0.4

                  IMAGE_PATH="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>:<<pipeline.git.revision>>"
                  echo $IMAGE_PATH
                  pip3 install -r requirements.txt

                  python3 ./sign_image.py --command="sign"\
                      --attestor-project-name="$ATTESTOR_PROJECT_NAME"\
                      --attestor-name="$ATTESTOR_NAME"\
                      --image-path="$IMAGE_PATH"\
                      --signer-logging-level="INFO"\
                      --attestor-key-id="//cloudkms.googleapis.com/v1/projects/$ATTESTOR_PROJECT_NAME/locations/global/keyRings/$ATTESTOR_NAME-key-ring/cryptoKeys/$ATTESTOR_NAME-key/cryptoKeyVersions/1"

workflows:
  release:
    jobs:
      - hold:
          type: approval
          filters:
            tags:
              only: (^op-monitorism\/v.*$|^op-defender\/v.*$)
            branches:
              ignore: /.*/
      - docker-build:
          name: op-monitorism-docker-release
          filters:
            tags:
              only: /^op-monitorism\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-monitorism
          docker_tags: <<pipeline.git.revision>>
          requires: ["hold"]
          platforms: "linux/amd64"
          publish: true
          release: true
          context:
            - oplabs-gcr
      - docker-build:
          name: op-defender-docker-release
          filters:
            tags:
              only: /^op-defender\/v.*/
            branches:
              ignore: /.*/
          docker_name: op-defender
          docker_tags: <<pipeline.git.revision>>
          requires: ["hold"]
          platforms: "linux/amd64"
          publish: true
          release: true
          context:
            - oplabs-gcr
  main:
    when:
      and:
        - or:
            # Trigger on new commits
            - equal: [webhook, << pipeline.trigger_source >>]
    jobs:
      - go-lint:
          name: op-defender-go-lint
          project_name: op-defender
      - go-lint:
          name: op-monitorism-go-lint
          project_name: op-monitorism
      - golang-test:
          name: op-defender-golang-test
          project_name: op-defender
      - golang-test:
          name: op-monitorism-golang-test
          project_name: op-monitorism
      - docker-build:
          name: op-monitorism-docker-build
          docker_name: op-monitorism
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64"
          publish: true
          context:
            - oplabs-gcr
      - docker-build:
          name: op-defender-docker-build
          docker_name: op-defender
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64"
          publish: true
          context:
            - oplabs-gcr
